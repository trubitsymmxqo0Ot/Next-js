/*
	Когда мы устанавливаем next js, нам нужжно ответить на 9 вопросов, вот что каждый из них 
	означает:
	
	Would you like to use TypeScript? - установка typescript в проект
	
	Which linter would you like to use? - установка линтера в проект (esLint и т.п.)
	
	Would you like to use Tailwind CSS? - установка tailwindcss в проект
	
	Would you like your code inside a `src/` directory? - если мы не укажем yes, тогда нам нужно будет
	создавать папки не в src, а в корне проекта, роутинг, соотвественно, будет также работать 
	только в том случае, если условная папка about будет в корне проекта. Однако, если мы укажем yes, 
	тогда файловая система будет строиться относительно папки src, которая в свою очередь уже находится
	в корне проекта

	Would you like to use App Router? (recommended) - включает роутинг по папкам

	Would you like to use Turbopack? (recommended) - вместо стандартного webpack, на котором 
	установлен next js, будет использовать Turbopack, он быстрее webpack в несколько раз. Однако,
	не смотря на то, что он уже давно был внедрен в next js, на момент 13.09.2025, он только недавно
	стал recomended, лучше подождать ещё несколько версий, чтобы turbopack довели до ума, в 
	продакшне лучше пока не стоит использовать turbopack

	Would you like to customize the import alias (`@/*` by default)? - устанавливает алиасы в 
	проект

	What import alias would you like configured? @/* - выбираем какой конкретный символ будет вызывать
	алиас пути

	В самом next js роутинг строится относительно файловой структуры (конечно же, если мы установили
	app router). Условно, мы поставили src directory, внутри src у нас вся структура папок и строится.
	Чтобы создать главную рутовую страницу по такому пути - /, нужно просто внутри src файла, в корне,
	создать page.tsx. Если же мы заходим создать вторую страницу на сайте, пускай это будет, условно
	about страница, тогда уже внутри src нам нужно будет создать папку about и внутри этой папки 
	создать файл page.tsx. Структура будет такой:

	Корень проекта/
		src/
		page.tsx - рутовая страница, путь /
			about/
				page.tsx - это вторая страница, путь будет /about


	Также, мы можем создавать и какие-то динамичные страницы, на основе, например, id пользователя,
	если мы делаем его личный профиль, это уже более обширная тема, там немного поменяется название
	папки, она будет примерно такой - [id] -> page.tsx, однако, вместе с этим нужно и каким-то 
	образом получить этого конкретного пользователя, достать его из списка всех пользователей, 
	передать в url и отрисовать в конкретном компоненте. Такой подход будет описывать чуть далее на
	примерах.

	Также, у нас есть layout.tsx - это общая обертка над page.tsx, как какой-нибудь условный main.tsx
	в react, где мы создаем реактовский рендер над всем jsx кодом. Разница лишь в том, что такой 
	layout мы можем вложить и в какие-то дочерние компоненты, он не обязательно может относиться 
	только к рутовому компоненту, струткрура может быть и такой:
	
	Корень проекта/
		page.tsx - главная страница, путь будет /
		layout.tsx
			about/
				page.tsx - страница about, путь будет /about
				layout.tsx

	Зачем это вообще нужно и что будет, если мы создавим второй layout?

	Представим себе такую структуру:
	
	Корень проекта/
		page.tsx
		layout.tsx
			about/
				page.tsx
				layout.tsx
				us/
					page.tsx
				complete/
					page.tsx

	К примеру, в layout, который находится в корне проекта (на самом верхнем уровне), мы указали
	header и footer, эти компоненты являются общими для всех страниц. Но мы также указали layout
	и внутри about, что тогда случится?

	Все дело в том, что корневой layout, который находится на самом верхнем уровне, будет все также
	влиять на все остальные страницы, это и about, и us, и complete, везде в этих компонентах 
	будут отрисованы header и footer, однако, у нас есть и второй layout, который находится внутри 
	about страницы. В этом конкретном случае, к примеру, в этом layout находится общая информация для
	всего, что относится к about и только для него. Этот layout будет распространяться на все доп.страницы,
	которые находятся в about, например, блоки с рекламой, какая-то дополнительная информация о пользтвателе
	и т.д., но все, что находится выше конкретно этого layout (который находится в about), все это 
	не будет никак взаимодействовать с этим layout, то есть, мы таким образом достигаем изолированности.

	Также, в конревом layout, который находится на самом высоком уровне, мы указываем шрифты, которые 
	будут использоваться на всех страницах, так как этот конкретный layout будет влиять на все страницы, 
	которые идут ниже по иерархии, а также, мы указываем seo оптимизации.

*/